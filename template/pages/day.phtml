<? $this->title = $this->day->title; ?>
{{wrap with="layout.phtml"}}
  {{into slot="og_meta"}}
    <meta property="og:type" content="{$#facebook_app_namespace}:day" />
    <meta property="og:url" content="{$#host_url}pages/{$#day.id}/day" />
    <meta property="og:title" content="{$#day.title}" />
    <meta property="{$#facebook_app_namespace}:location" content="{$#day.location}" />
    <meta property="{$#facebook_app_namespace}:type" content="{$#day->type}" />
  {{/into}}
  {{into slot="js_include"}}
    <script src="/lib/vendor/handlebars.js"></script>
    <script src="/lib/vendor/bootstrap-fileupload.js"></script>
    <script src="/lib/vendor/jquery.scrollTo-1.4.3.1-min.js"></script>
    <script src="/lib/Template.js"></script>
  {{/into}}
  {{into slot="css_include"}}
    <link href="/styles/jasny-bootstrap.css" rel="stylesheet">
  {{/into}}
  {{into slot="templates"}}
    <script id="template_comments" type="text/x-handlebars-template">
      [[#comments]]
        <li class="comment-item" style="display:none" comment_id="[[id]]">
          <img src="[[user.image_72]]" width="72" class="pull-left img-rounded" alt="" />

          <div class="bubble left">
            <p class="text">
              [[#if-eq user.id {$this->current_user->id}]]
                <a class="pull-right not-decorated with-shadow" id="trigger_comment_delete"><i class="icon-trash"></i></a>
              [[/if-eq]]

              [[text]]

              <small>by <b><a href="/pages/[[user.id]]/user">[[user.name]]</a></b></small>
            </p>
          </div>
        </li>
      [[/comments]]
    </script>
  {{/into}}
  <script>
  {{into slot="js_ready"}}
    <? if($this->toolkit->getUser()) { ?>
      <? if($this->is_owner) { ?>
        // Day delete
        var day_delete_button = $('#trigger_day_delete');

        day_delete_button.click(function() {
          if(confirm("Do you really want to delete this day?")) {
            var delete_request = API.request('POST', '/days/' + day_delete_button.attr('day_id') + '/delete');
            delete_request.success(function() {
              window.location = '/pages/my_days';
            });

            delete_request.error(function() {
              alert("We can't delete this day right now, please try again later or tell us about this issue");
            }, true);

            delete_request.send();
          }
        });

        // Day title
        var day_title_input = $('.day-title');
        var day_title_button = $('#trigger_save_day_title');

        day_title_input.on('keyup', function() {
          var text = day_title_input.text();

          if($.trim(text) != '' && text.length > 4) {
            if(day_title_button.css('display') == 'none') {
              day_title_button.slideDown();
            }
            day_title_button.removeClass('disabled').addClass('btn-success');
            day_title_button.text('Save title');
          } else {
            day_title_button.addClass('disabled').removeClass('btn-success');
            day_title_button.text('Title is too short');
          }
        });

        day_title_button.click(function() {
          if(!day_title_button.hasClass('disabled')) {
            day_title_input.prop("contenteditable", false);
            day_title_button.addClass('disabled');

            var final_description_request = API.request('POST', '/days/{$#day->id}/update', {
              title: day_title_input.text()
            });

            final_description_request.success(function() {
              day_title_input.prop("contenteditable", true);
              day_title_button.slideUp();
              day_title_button.addClass('disabled').removeClass('btn-success');
            });

            final_description_request.error(function() {
              day_title_button.addClass('btn-error').removeClass('btn-success');
              day_title_button.text('Retry');
            });

            final_description_request.send();
          }
        });

        // day_title_input.on('blur', function(event) {
        //   var text = day_title_input.text();
        //   if($.trim(text) != '') {
        //     if(text.length > 4) {
        //       console.log(text);
        //     } else {
        //       alert('Day title is too short!');
        //       day_title_input.focus();
        //     }
        //   }
        // });

        // Moments
        $('.moment-item').each(function() {
          var element = $(this);
          var id = element.attr('moment_id');

          // Moment time
          var time_input  = element.find('input[type=time]');
          var time_button = element.find('#trigger_save_time');

          time_input.change(function(event) {
            time_button.removeClass('disabled').addClass('btn-success');
          });

          time_button.click(function() {
            if(!time_button.hasClass('disabled')) {
              console.log("new time " + time_input.val());

              // time_input.addClass('disabled');
              // time_button.addClass('disabled');

              var found = false;
              $('.moment-item').each(function() {
                if($(this) == element && found)
                  return;

                  console.log(time_input.val() + '<' + $(this).find('input[type=time]').val());
                if(time_input.val() < $(this).find('input[type=time]').val()) {
                  found = true;

                  var placeholder = element.next();
                  element.insertBefore($(this));
                  placeholder.insertAfter(element);
                  $(window).scrollTo(element, 300);
                }
              });

              time_button.addClass('disabled').removeClass('btn-success');
            }
          });

          // Moment delete
          var delete_button = element.find('#trigger_moment_delete');

          delete_button.click(function() {
            if(confirm("Do you really want to delete this moment?")) {
              var delete_request = API.request('POST', '/moments/' + id + '/delete');
              delete_request.success(function() {
                element.fadeOut(500);
                element.next().fadeOut(500);
                element.remove();
                element.next().remove();
              });

              delete_request.error(function() {
                alert("We can't delete moment right now, please try again later or tell us about this issue");
              }, true);

              delete_request.send();
            }
          });

          // Moment description edit
          var description = element.find('.moment-description');
          var description_input  = description.find('textarea');
          var description_button = description.find('button[type=submit]');

          description_input.on('keyup', function(event) {
            description_button.removeClass('disabled').addClass('btn-success');
          });

          description_button.click(function() {
            if(!description_button.hasClass('disabled')) {
              description_input.prop("disabled", true);
              description_button.addClass('disabled');

              var description_request = API.request('POST', '/moments/' + id + '/update', {
                description: description_input.val()
              });

              description_request.success(function() {
                description_input.prop("disabled", false);
                description_button.addClass('disabled').removeClass('btn-success');
              });

              description_request.error(function() {
                description_button.addClass('btn-error').removeClass('btn-success');
              });

              description_request.send();
            }
          });
        });

        // Moment description edit
        var final_description = $('.final-description');
        var final_description_input  = final_description.find('textarea');
        var final_description_button = final_description.find('button[type=submit]');

        final_description_input.on('keyup', function(event) {
          final_description_button.removeClass('disabled').addClass('btn-success');
        });

        final_description_button.click(function() {
          if(!final_description_button.hasClass('disabled')) {
            final_description_input.prop("disabled", true);
            final_description_button.addClass('disabled');

            var final_description_request = API.request('POST', '/days/{$#day->id}/update', {
              final_description: final_description_input.val()
            });

            final_description_request.success(function() {
              final_description_input.prop("disabled", false);
              final_description_button.addClass('disabled').removeClass('btn-success');
            });

            final_description_request.error(function() {
              final_description_button.addClass('btn-error').removeClass('btn-success');
            });

            final_description_request.send();
          }
        });
      <? } ?>

      // Comments updater
      var comments = $('.comments');
      var comments_input  = comments.find('textarea');
      var comments_button = comments.find('button[type=submit]');
      var comments_delete_button_selector = '#trigger_comment_delete';
      var comments_delete_button = comments.find(comments_delete_button_selector);
      var comments_counter = comments.find('#comments_counter');

      var comments_loader = $('.comments-loader');
      var comments_loader_button =  comments_loader.find('button[type=button]');
      var comments_template = Template.prepareTemplate($('#template_comments'));

      var deleteComment = function() {
        var element = $(this).closest('[comment_id]');
        var id = element.attr('comment_id');

        if(confirm("Do you really want to delete your comment?")) {
          var delete_request = API.request('POST', '/day_comments/' + id + '/delete');
          delete_request.success(function() {
            element.fadeOut(500);
            element.remove();
          });

          delete_request.error(function() {
            alert("We can't delete comment right now, please try again later or tell us about this issue");
          }, true);

          delete_request.send();
        }
      };

      var updateComments = function() {
        if(!comments_loader_button.hasClass('disabled')) {
          var comments_request = API.request('GET', '/days/{$#day->id}/comments', {
            from: comments.find('li[comment_id]').last().attr('comment_id')
          });

          comments_loader_button.addClass('disabled');

          comments_request.success(function(response) {
            comments_loader_button.removeClass('disabled btn-error');

            var tmp = $($.trim(Template.compileElement(comments_template, {comments:response.data.result})));

            tmp.find(comments_delete_button_selector).click(deleteComment);

            comments_loader.before(tmp);

            $('.comment-item').fadeIn();

            var count = parseInt(comments_counter.text())+response.data.result.length;

            if(count > 3 && comments_loader_button.css('display') == 'none') {
              comments_loader_button.css('display', 'block');
            }

            comments_counter.text(count);
          });

          comments_request.error(function() {
            comments_loader_button.addClass('btn-error');
          });

          comments_request.send();
        }
      };

      comments_loader_button.click(updateComments);

      // Comments
      comments_input.on('keyup', function(event) {
        comments_button.removeClass('disabled').addClass('btn-success');
      });

      comments_button.click(function() {
        if(!comments_button.hasClass('disabled')) {
          comments_input.prop("disabled", true);
          comments_button.addClass('disabled');

          var comments_request = API.request('POST', '/days/{$#day->id}/comment', {
            text: comments_input.val()
          });

          comments_request.success(function() {
            comments_input.val('');
            comments_input.prop("disabled", false);
            updateComments();
            comments_button.addClass('disabled').removeClass('btn-success');
          });

          comments_request.error(function() {
            comments_button.addClass('btn-error').removeClass('btn-success');
          });

          comments_request.send();
        }
      });

      comments_delete_button.click(deleteComment);

      // Like toggle
      <?php if(property_exists($this->day, 'is_liked')) { ?>
        var like_current_state = {$this->day->is_liked|default:'false'};
        var likes_count = {$this->day->likes_count};

        var like_button = $('button#toggle_like');
        like_button.click(function() {
          if(!like_button.hasClass('disabled')) {
            like_button.addClass('disabled');

            if(like_current_state == true) {
              var like_request = API.request('POST', '/days/{$#day->id}/unlike');
              like_request.success(function() {
                like_current_state = false;
                likes_count--;

                like_button.text('Like');
                $('#toggle_like_icon').html('<i class="icon icon-heart-empty"></i> ' + likes_count);
                like_button.removeClass('disabled');
              });
              like_request.send();
            } else {
              var like_request = API.request('POST', '/days/{$#day->id}/like');
              like_request.success(function() {
                like_current_state = true;
                likes_count++;

                like_button.text('Unlike');
                $('#toggle_like_icon').html('<i class="icon icon-heart"></i> ' + likes_count);
                like_button.removeClass('disabled');
              });
              like_request.send();
            }
          }
        });
      <? } ?>
    <? } ?>

    // Share toggle
    var share_button = $('button#toggle_share');
    share_button.click(function() {
       if(!share_button.hasClass('disabled')) {
        share_button.addClass('disabled')
        var share_request = API.request('POST', '/days/{$#day->id}/share');
        share_request.complete(function() {
          share_button.removeClass('disabled');
        });
        share_request.send();
      }
    });

    // Mobile nav comments
    $('.mobile-nav #comments').click(function() {
      $(document).scrollTo($('.comments'), 400);
    });
  {{/into}}
  </script>
  {{into slot="content"}}
      <div class="row-fluid">
          <div class="span6 offset3">
              <? if($this->is_owner) { ?>
                <span class="day-controls pull-right">
                  <a class="not-decorated with-shadow" id="trigger_day_delete" day_id="{$#day->id}"><i class="icon-trash"></i></a>
                </span>
              <? } ?>

              <h3 <? if($this->is_owner) { ?>contenteditable <? } ?>class="day-title">{$#day->title}</h3>

              <? if($this->is_owner) { ?>
                <button id="trigger_save_day_title" type="submit" class="btn btn-block btn-success" style="display:none">Save title</button>
              <? } ?>

              <p class="muted day-info">
                <span class="pull-right">
                  <i class="icon icon-calendar"></i> {$#day->utime}
                </span>
                {$#day->type} by <b><a href="/pages/{$#day->user->id}/user">{$#day->user->name}</a></b>
                <!-- @ {$#day.location} -->
              </p>

              <div class="mobile-nav">
                <h5>Go to:</h5>
                <ul class="unstyled">
                  <li>
                    <div class="input-prepend">
                      <span class="add-on add-on-small"><i class="icon-comments"></i> {$this->day->comments_count}</span>
                      <button id="comments" class="btn btn-small" type="button">Comments</button>
                    </div>
                  </li>
                </ul>
              </div>

              {{list using="$#day->moments"}}
                  <ul class="unstyled">
                      <? if($this->is_owner) { ?>
                        <li class="well moment-item-placeholder">
                          <a class="not-decorated with-shadow" data-toggle="modal" data-target="#add_moment_modal"><i class="icon-plus-sign icon-2x"></i></a>
                        </li>
                      <? } ?>
                      {{list:item}}
                      <li class="well moment-item" moment_id="{$item->id}">
                          <? if($this->is_owner) { ?>
                            <span class="moment-controls-overlay">
                              <a class="not-decorated with-shadow" id="trigger_moment_delete"><i class="icon-trash"></i></a>
                            </span>
                          <? } ?>

                          <div class="timepicker text-center with-shadow">
                            <? if($this->is_owner) { ?>
                              <span class="input-prepend input-append">
                                <span class="add-on add-on-small"><i class="icon-time"></i></span>
                                <input type="time" class="input-mini add-on-small" value="{$item->time}" />
                                <button id="trigger_save_time" class="btn btn-small disabled" type="button">Save</button>
                              </span>
                            <? } else { ?>
                              <i class="icon-time"></i> {$item->time}
                            <? } ?>
                          </div>

                          <div class="moment-image-holder">
                            <img src="{$item->image_532}" width="400" class="img-polaroid" alt="" />
                            <!-- <span class="moment-image-overlay overlay-like">
                              <i class="icon-heart<?= $item->is_liked ? '' : '-empty'; ?>"></i> {$item->likes_count}
                            </span> -->
                          </div>

                          <br class="clearfix" />


                          <? if($this->is_owner || $item->description) { ?>
                            <p class="bubble moment-description">
                              <? if($this->is_owner) { ?>
                                <textarea rows="3" class="input-block-level" placeholder="Enter moment description...">{$item->description|default:""|nl2br}</textarea>
                                <button type="submit" class="btn btn-block disabled">Save description</button>
                              <? } else { ?>
                                {$item->description|nl2br}
                              <? } ?>
                            </p>
                          <? } ?>
                      </li>
                      <? if($this->is_owner) { ?>
                        <li class="well moment-item-placeholder">
                          <a class="not-decorated with-shadow" data-toggle="modal" data-target="#add_moment_modal"><i class="icon-plus-sign icon-2x"></i></a>
                        </li>
                      <? } ?>
                      {{/list:item}}
                  </ul>
              {{/list}}

              <? if($this->is_owner || $this->day->final_description) { ?>
                <p class="bubble final-description">
                  <? if($this->is_owner) { ?>
                    <textarea rows="3" class="input-block-level" placeholder="Enter final description...">{$#day->final_description|default:""|nl2br}</textarea>

                    <? if($this->day->final_description) { ?>
                      <button type="submit" class="btn btn-block disabled">Save changes</button>
                    <? } else { ?>
                      <button type="submit" class="btn btn-block<? if(count($this->day->moments) > 1) { ?> disabled<? } ?>">Close the day</button>
                    <? } ?>
                  <? } else { ?>
                    {$#day->final_description|default:""|nl2br}
                  <? } ?>
                </p>
              <? } else { ?>
                <div class="alert alert-block">
                  <h4>This day is live!</h4>
                  Stay tuned for new moments in this day, it's not finished yet!
                </div>
              <? } ?>

              <div class="day-user-actions">
                <ul class="pull-right unstyled inline">
                  <? if($this->toolkit->getUser()) { ?>
                  <li>
                    <?php
                    $disabled = false;
                    if(!property_exists($this->day, 'is_liked')) {
                      $disabled = true;
                      $text = "Like";
                      $icon = "icon-heart";
                    } elseif($this->day->is_liked) {
                      $text = "Unlike";
                      $icon = "icon-heart";
                    } else {
                      $text = "Like";
                      $icon = "icon-heart-empty";
                    }
                    ?>
                    <div class="input-prepend">
                      <span id="toggle_like_icon" class="add-on add-on-small"><i class="icon <?= $icon ?>"></i> {$this->day->likes_count}</span>
                      <button id="toggle_like" class="btn btn-small<?= $disabled ? ' disabled' : '' ?>" type="button"> <?= $text ?></button>
                    </div>
                  </li>
                  <!-- <li>
                    <?php
                    $disabled = false;
                    if(!property_exists($this->day, 'is_favorite')) {
                      $disabled = true;
                      $text = "Favorite";
                      $icon = "icon-bookmark";
                    } elseif($this->day->is_favorite) {
                      $text = "Unfavorite";
                      $icon = "icon-bookmark";
                    } else {
                      $text = "Favorite";
                      $icon = "icon-bookmark-empty";
                    }
                    ?>
                    <div class="input-prepend">
                      <span class="add-on add-on-small"><i class="icon <?= $icon ?>"></i></span>
                      <button class="btn btn-small<?= $disabled ? ' disabled' : '' ?>" type="button"> <?= $text ?></button>
                    </div>
                  </li> -->
                  <? } ?>
                  <li>
                    <button id="toggle_share" class="btn btn-small" style="margin-top: 14px" type="button"><i class="icon icon-share"></i> Share</button>
                  </li>
                </ul>
              </div>

              <hr/>

              <div class="comments">
                <span class="pull-right not-decorated with-shadow">
                  <i class="icon-comments"></i>
                  <span id="comments_counter"><? if($this->day->comments_count > 3) { ?>3/<? } ?>{$this->day->comments_count}</span>
                </span>
                <h4>Comments:</h4>
                  <ul class="unstyled">
                    {{list using="$#day->comments"}}
                      {{list:item}}
                        <li class="comment-item" comment_id="{$item->id}">
                          <img src="{$item->user->image_72}" width="72" class="pull-left img-rounded" alt="" />

                          <div class="bubble left">
                            <p class="text">
                              <? if($item->user->id == $this->current_user->id) { ?>
                                <a class="pull-right not-decorated with-shadow" id="trigger_comment_delete"><i class="icon-trash"></i></a>
                              <? } ?>

                              {$item->text}

                              <small>by <b><a href="/pages/{$item->user->id}/user">{$item->user->name}</a></b></small>
                            </p>
                          </div>
                        </li>
                      {{/list:item}}
                    {{/list}}
                    <li class="comments-loader">
                      <button class="btn btn-small btn-block"<? if($this->day->comments_count < 4) { ?> style="display:none"<? } ?> type="button">
                        Load more comments
                      </button>
                    </li>
                  </ul>

                <? if($this->toolkit->getUser()) { ?>
                  <textarea rows="3" class="input-block-level"></textarea>
                  <button type="submit" class="btn btn-block disabled">Send comment</button>
                <? } ?>
              </div>
          </div>
      </div>

      <div id="add_moment_modal" class="modal hide fade">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
          <h3>Add moment</h3>
        </div>
        <div class="modal-body">
          <p>
              <h4>From your PC:</h4>
              <div class="text-center">
                <div class="fileupload fileupload-new" data-provides="fileupload">
                  <div class="fileupload-new thumbnail" style="width: 200px; height: 150px;">
                    <img src="http://www.placehold.it/200x150/EFEFEF/AAAAAA&text=no+image" />
                  </div>
                  <div class="fileupload-preview fileupload-exists thumbnail" style="max-width: 200px; max-height: 150px; line-height: 20px;"></div>
                  <div>
                    <span class="btn btn-file">
                      <span class="fileupload-new">Select image</span>
                      <span class="fileupload-exists">Change</span>
                      <input type="file" />
                    </span>
                    <a href="#" class="btn fileupload-exists" data-dismiss="fileupload">Remove</a>
                  </div>
                </div>
              </div>

              <h4>Import from:</h4>
              <div class="text-center">
                <a class="btn">
                    <i class="icon icon-large icon-camera-retro"></i>
                    Instagram
                </a>
                <a class="btn disabled">
                    <i class="icon icon-large icon-camera"></i>
                    Flickr
                </a>
                <a class="btn disabled">
                    <i class="icon icon-large icon-facebook-sign"></i>
                    Facebook
                </a>
              </div>
          </p>
        </div>
      </div>
  {{/into}}
{{/wrap}}
