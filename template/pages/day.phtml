<? $this->title = $this->day->title; ?>
{{wrap with="layout.phtml"}}
  {{into slot="og_meta"}}
    <meta property="og:type" content="{$#facebook_app_namespace}:day" />
    <meta property="og:url" content="{$#host_url}pages/{$#day->id}/day" />
    <meta property="og:title" content="{$#day->title}" />
    <meta property="{$#facebook_app_namespace}:type" content="{$#day->type}" />
  {{/into}}
  {{into slot="js_include"}}
    <script src="/lib/vendor/bootstrap-datepicker.js"></script>
    <script src="/lib/vendor/jquery.ajax-progress.js"></script>
    <script src="/lib/vendor/bootstrap-timepicker.min.js"></script>
  {{/into}}
  {{into slot="css_include"}}
    <link href="/styles/bootstrap-datepicker.css" rel="stylesheet">
    <link href="/styles/bootstrap-timepicker.min.css" rel="stylesheet">
  {{/into}}
  {{into slot="templates"}}
    <script id="template_comments" type="text/x-handlebars-template">
      [[#comments]]
        <li class="comment-item" style="display:none" comment_id="[[id]]">
          <img src="[[user.image_72]]" width="72" class="pull-left img-rounded" alt="" />

          <div class="bubble left">
            <p class="text">
              <? if($this->current_user) { ?>
                [[#if-eq user.id {$this->current_user->id}]]
                  <a class="pull-right not-decorated with-shadow btn-comment-delete"><i class="icon-trash"></i></a>
                [[/if-eq]]
              <? } ?>

              [[text]]

              <small>by <b><a href="/pages/[[user.id]]/user">[[user.name]]</a></b></small>
            </p>
          </div>
        </li>
      [[/comments]]
    </script>

    <script id="template_moment" type="text/x-handlebars-template">
      <li class="well moment-item moment-item-new">
        <span class="moment-controls-overlay">
          <a class="not-decorated with-shadow" id="trigger_moment_delete"><i class="icon-trash"></i></a>
        </span>

        <div class="timepicker text-center with-shadow">
          <span class="input-prepend input-append">
            <span class="add-on add-on-small"><i class="icon-calendar"></i></span>
            <input type="text" subtype="date" class="add-on-small" value="[[moment.date]]" />

            <span class="add-on add-on-small"><i class="icon-time"></i></span>
            <input type="text" subtype="time" class="add-on-small" value="[[moment.time]]" seconds="[[moment.time_seconds]]" timezone="[[moment.timezone]]" />

            <button id="trigger_save_time" class="btn btn-small disabled" type="button">Save</button>
          </span>
        </div>

        <div class="moment-image-holder">
          <img src="[[#if moment.image]][[moment.image]][[else]]http://placehold.it/532x532&text=Select+image[[/if]]" width="400" class="img-polaroid" alt="" />
        </div>

        <br class="clearfix" />

        <p class="bubble moment-description">
          <textarea rows="3" class="input-block-level" placeholder="Enter moment description...">[[moment.description]]</textarea>
          <button type="submit" class="btn btn-block btn-success">Add moment</button>
        </p>
      </li>

      <li class="well moment-item-placeholder">
        <a class="not-decorated with-shadow"><i class="icon-plus-sign icon-2x"></i></a>
      </li>
    </script>

    <script id="template_image_select" type="text/x-handlebars-template">
      <div class="file-selector">
        <h5>From PC:</h5>
        <div class="text-center">
          <div class="fileupload fileupload-new" data-provides="fileupload">
            <div>
              <button class="btn btn-file">
                <span class="fileupload-new">
                  <i class="icon icon-large icon-cloud-upload"></i>
                  Select image
                </span>
                <input type="file" />
              </button>
            </div>
          </div>
        </div>

        <h5>Import from:</h5>
        <div class="text-center">
          <button class="btn">
              <i class="icon icon-large icon-camera-retro"></i>
              Instagram
          </button>
          <button class="btn disabled">
              <i class="icon icon-large icon-camera"></i>
              Flickr
          </button>
          <button class="btn disabled">
              <i class="icon icon-large icon-facebook-sign"></i>
              Facebook
          </button>
        </div>
      </div>
    </script>


    <script id="template_upload_progress" type="text/x-handlebars-template">
      <div class="moment-upload-progress" style="display:none">
        <div class="progress progress-striped active">
          <div class="bar" style="width: 1%;"></div>
        </div>
      </div>
    </script>
  {{/into}}
  <script>
  {{into slot="js_ready"}}
    var today = Tools.getDate();

    <? if($this->toolkit->getUser()) { ?>
      <? if($this->is_owner) { ?>
        // File reader
        var FileReaderFilter = /^(?:image\/bmp|image\/cis\-cod|image\/gif|image\/ief|image\/jpeg|image\/jpeg|image\/jpeg|image\/pipeg|image\/png|image\/svg\+xml|image\/tiff|image\/x\-cmu\-raster|image\/x\-cmx|image\/x\-icon|image\/x\-portable\-anymap|image\/x\-portable\-bitmap|image\/x\-portable\-graymap|image\/x\-portable\-pixmap|image\/x\-rgb|image\/x\-xbitmap|image\/x\-xpixmap|image\/x\-xwindowdump)$/i;

        // Moment time selectors
        var date_input_selector = 'input[subtype=date]';
        var time_input_selector = 'input[subtype=time]';

        // Moment add helpers
        var moments_selector = '.moment-item';
        var moment_placeholder_selector = '.moment-item-placeholder';
        var moment_description_selector = '.moment-description';
        var moment_description_button_selector = 'button[type=submit]';

        // File selector popover
        var popover_template = $('#template_image_select').html(); // Tricky creation of object, that can handle events
        var popover_file_select_handler = function(event) {
          var $this = $(this);
          var reader = new FileReader();
          var file = event.target.files !== undefined ? event.target.files[0] : (event.target.value ? { name: event.target.value.replace(/^.+\\/, '') } : null);

          $(reader).load(function() {
            var moment = $this.closest(moments_selector);
            moment.find(moment_description_selector).find(moment_description_button_selector).addClass('btn-success').removeClass('disabled');
            moment.addClass('success');
            moment.find('.moment-image-holder img').attr('src', this.result);
          });

          if (!FileReaderFilter.test(file.type)) {
            alert("Currently we support only images!");
            return;
          }

          reader.readAsDataURL(file);
        };

        var add_image_popover = {
          html: true,
          trigger: 'manual',
          title: 'Select file',
          content: popover_template,
          position: function() {
            if($(window).width() > 800) {
              return 'right';
            } else {
              return 'bottom';
            }
          }
        };

        var init_placeholder_actions = function(placeholder) {
          placeholder.bind('dragover', function(event) {
            event.stopPropagation();
            event.preventDefault();
            event.originalEvent.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
          });

          placeholder.bind('drop', function (event) {
            event.stopPropagation();
            event.preventDefault();

            // Feature: upload by dragging from another page
            // console.log(event.originalEvent.dataTransfer.getData('text/html'));

            var files = event.originalEvent.dataTransfer.files; // FileList object.

            for (var i = 0, file; file = files[i]; i++) {
              create_moment_from_file(file);
            }
          });

          placeholder.find('a').click(function() {
            var _this = $(this).closest(moment_placeholder_selector);
            var prev_moment = _this.prev();
            var next_moment = _this.next();

            var this_moment = {
              date:Tools.getDate(),
              time:Tools.getTime(),
              time_seconds:Tools.getSeconds(),
              timezone:Tools.getTimezone()
            };

            if(prev_moment.length != 0 && next_moment.length != 0) {
              var prev_date_input = prev_moment.find(date_input_selector);
              var prev_time_input = prev_moment.find(time_input_selector);

              var prev_timestamp = Tools.createDateObject(prev_date_input.val(),
                                                        prev_time_input.val() + ':' + prev_time_input.attr('seconds'),
                                                        prev_time_input.attr('timezone')).getTime();

              var next_date_input = next_moment.find(date_input_selector);
              var next_time_input = next_moment.find(time_input_selector);

              var next_timestamp = Tools.createDateObject(next_date_input.val(),
                                                        next_time_input.val() + ':' + next_time_input.attr('seconds'),
                                                        next_time_input.attr('timezone')).getTime();

              var new_moment_date = new Date();
              new_moment_date.setTime(Math.ceil((prev_timestamp+next_timestamp)/2));

              this_moment = {
                date:Tools.getDate(new_moment_date),
                time:Tools.getTime(new_moment_date),
                time_seconds:Tools.getSeconds(new_moment_date),
                timezone:prev_time_input.attr('timezone')
              };
            } else if(next_moment.length != 0) {
              var next_date_input = next_moment.find(date_input_selector);
              var next_time_input = next_moment.find(time_input_selector);

              // Returns in UTC Timezone
              var new_moment_date = Tools.createDateObject(next_date_input.val(),
                                                        next_time_input.val() + ':' + next_time_input.attr('seconds'),
                                                        next_time_input.attr('timezone'));

              new_moment_date.setMinutes(new_moment_date.getMinutes() - 15);

              this_moment = {
                date:Tools.getDate(new_moment_date),
                time:Tools.getTime(new_moment_date),
                time_seconds:Tools.getSeconds(new_moment_date),
                timezone:next_time_input.attr('timezone')
              };

            }

            create_moment(this_moment);
          });
        };

        (function() {
          // Don't open files in browser if user missed moment-box
          $(document).bind('drop dragover', function(event) {
            event.stopPropagation();
            event.preventDefault();
            event.originalEvent.dataTransfer.dropEffect = 'none'; // Explicitly show this is a copy.
          });

          init_placeholder_actions($(moment_placeholder_selector));
        })();

        // Day delete
        var day_delete_button = $('#trigger_day_delete');

        day_delete_button.click(function() {
          if(confirm("Do you really want to delete this day?")) {
            var delete_request = API.request('POST', '/days/' + day_delete_button.attr('day_id') + '/delete');
            delete_request.success(function() {
              window.location = '/pages/my_days';
            });

            delete_request.error(function() {
              alert("We can't delete this day right now, please try again later or tell us about this issue");
            }, true);

            delete_request.send();
          }
        });

        // Day title
        var day_title = $('#day_title_selector');
        var day_title_input = day_title.find('input[type=text]');
        var day_title_button = day_title.find('button[type=submit]');
        var day_title_alert = day_title.find('.alert-small');
        var day_title_alert_contents = day_title_alert.find('.contents');

        day_title_input.on('keyup', function() {
          var text = day_title_input.val();

          if($.trim(text) == '' || text.length < 4) {
            day_title_button.addClass('disabled').removeClass('btn-success');
            day_title_alert.finish().show();
            day_title_alert_contents.text('Title is too short');
          } else if(text.length > 40) {
            day_title_button.addClass('disabled').removeClass('btn-success');
            day_title_alert.finish().show();
            day_title_alert_contents.text('Title is too long');
          } else {
            day_title_button.removeClass('disabled').addClass('btn-success');
            day_title_alert.finish().hide();
          }
        });

        day_title_button.click(function() {
          if(!day_title_button.hasClass('disabled')) {
            day_title_input.prop("disabled", true);
            day_title_button.addClass('disabled');

            var day_title_request = API.request('POST', '/days/{$#day->id}/update', {
              title: day_title_input.val()
            });

            day_title_request.success(function() {
              day_title_input.prop("disabled", false);
              day_title_button.text('Save');
              day_title_button.addClass('disabled').removeClass('btn-success');
            });

            day_title_request.error(function() {
              day_title_button.addClass('btn-danger').removeClass('btn-success');
              day_title_button.text('Retry');
            });

            day_title_request.send();
          }
        });

        // Day type
        var day_type = $('#day_type_selector');
        var day_type_buttons = day_type.find('button');

        day_type_buttons.click(function() {
          var $this = $(this);

          day_type_buttons.removeClass('btn-success active');
          $this.addClass('active');

          var day_type_request = API.request('POST', '/days/{$#day->id}/update', {
            type: $this.text()
          });

          day_type_request.success(function() {
            $this.addClass('btn-success').removeClass('btn-danger');;
          });

          day_type_request.error(function() {
            $this.addClass('btn-danger').removeClass('btn-success');;
          });

          day_type_request.send();
        });

        // Moments
        var moment_template = Template.prepareTemplate($('#template_moment'));

        var insert_moment = function(element) {
          var date_input = element.find(date_input_selector);
          var time_input = element.find(time_input_selector);

          // Returns in UTC Timezone
          var new_datetime = Tools.createDateObject(date_input.val(), time_input.val() + ':' + time_input.attr('seconds'), time_input.attr('timezone'));

          var placeholder = element.next();

          var found = false;
          $(moments_selector).each(function() {
            if($(this).is(element) || found) {
              return;
            }

            var tmp_datetime = Tools.createDateObject(
                                      $(this).find(date_input_selector).val(),
                                      $(this).find(time_input_selector).val() + ':' + $(this).find(time_input_selector).attr('seconds'),
                                      $(this).find(time_input_selector).attr('timezone'));

            if(new_datetime < tmp_datetime) {
              found = true;

              element.insertBefore($(this));
            }
          });

          if(!found) {
            $('.moments-list').append(element);
          }

          placeholder.insertAfter(element);
        };

        var attach_moment_events = function(element) {
          var id = element.attr('moment_id');

          var date_input  = element.find(date_input_selector);
          var time_input  = element.find(time_input_selector);

          // Moment time
          date_input.datepicker({
            format: 'yyyy-mm-dd',
            startDate: '2000-01-01',
            endDate: today,
            weekStart: 1,
            todayBtn: true,
            todayHighlight: true
          });

          time_input.timepicker({
            minuteStep: 5,
            template: false,
            isOpen: true,
            showMeridian: false
          });


          var datetime_button = element.find('#trigger_save_time');

          time_input.bind('change keyup', function(event) {
            datetime_button.removeClass('disabled').addClass('btn-success');
          });

          date_input.change(function(event) {
            datetime_button.removeClass('disabled').addClass('btn-success');
          });

          datetime_button.click(function() {
            if(!datetime_button.hasClass('disabled')) {
              datetime_button.addClass('disabled');
              time_input.prop('disabled', true);
              date_input.prop('disabled', true);

              var moment_time_request = API.request('POST', '/moments/'+id+'/update', {
                time: date_input.val() + 'T' + time_input.val() + ':' + time_input.attr('seconds') + time_input.attr('timezone')
              });

              moment_time_request.success(function() {
                insert_moment(element, date_input.val(), time_input.val());
                $(window).scrollTo(element, 300);

                time_input.prop('disabled', false);
                date_input.prop('disabled', false);
                datetime_button.addClass('disabled').removeClass('btn-success');
              });

              moment_time_request.error(function() {
                datetime_button.addClass('btn-danger').removeClass('btn-success');
              });

              moment_time_request.send();
            }
          });

          // Moment delete
          var delete_button = element.find('#trigger_moment_delete');

          delete_button.click(function() {
            if(confirm("Do you really want to delete this moment?")) {
              var delete_request = API.request('POST', '/moments/' + id + '/delete');
              delete_request.success(function() {
                remove_moment(element);
              });

              delete_request.error(function() {
                alert("We can't delete moment right now, please try again later or tell us about this issue");
              }, true);

              delete_request.send();
            }
          });

          // Moment description edit
          var description = element.find(moment_description_selector);
          var description_input  = description.find('textarea');
          var description_button = description.find(moment_description_button_selector);

          description_input.on('keyup', function(event) {
            description_button.removeClass('disabled').addClass('btn-success');
          });

          description_button.click(function() {
            if(!description_button.hasClass('disabled')) {
              description_input.prop("disabled", true);
              description_button.addClass('disabled');

              var description_request = API.request('POST', '/moments/' + id + '/update', {
                description: description_input.val()
              });

              description_request.success(function() {
                description_input.prop("disabled", false);
                description_button.addClass('disabled').removeClass('btn-success');
              });

              description_request.error(function() {
                description_button.addClass('btn-danger').removeClass('btn-success');
              });

              description_request.send();
            }
          });
        };

        var remove_moment = function(element) {
          var fade_time = 500;

          element.next().fadeOut(fade_time, function() {
            element.next().remove();
          });

          element.fadeOut(fade_time, function() {
            element.remove();
          });
        };

        var create_moment = function(moment, do_scroll) {
          // Default data
          moment = $.extend({
            date:Tools.getDate(),
            time:Tools.getTime(),
            time_seconds:Tools.getSeconds(),
            timezone:Tools.getTimezone(),
            image:'',
            description:''
          }, moment);

          var tmp = $($.trim(Template.compileElement(moment_template, {moment:moment})));
          var element = tmp.first();

          // Moment description editor
          var description = element.find('.moment-description');
          var description_input = description.find('textarea');

          // Save button
          var save_button = description.find('button[type=submit]');

          if(moment.image == '') {
            var popover = element.find('img').popover(add_image_popover);

            $(popover).bind('shown', function() {
              element.find('input[type=file]').on('change', popover_file_select_handler);
            });

            save_button.addClass('disabled').removeClass('btn-success');

            element.find('img').load(function() {
              element.find('img').popover('show');
            });
          }

          // Moment placeholder
          init_placeholder_actions(element.next());

          var date_input  = element.find(date_input_selector);
          var time_input  = element.find(time_input_selector);

          // Moment time
          date_input.datepicker({
            format: 'yyyy-mm-dd',
            startDate: '2000-01-01',
            endDate: today,
            weekStart: 1,
            todayBtn: true,
            todayHighlight: true
          });

          time_input.timepicker({
            minuteStep: 5,
            template: false,
            isOpen: true,
            showMeridian: false
          });

          var datetime_button = element.find('#trigger_save_time');

          time_input.bind('change keyup', function(event) {
            datetime_button.removeClass('disabled').addClass('btn-success');
          });

          date_input.change(function(event) {
            datetime_button.removeClass('disabled').addClass('btn-success');
          });

          datetime_button.click(function() {
            if(!datetime_button.hasClass('disabled')) {
              datetime_button.addClass('disabled');
              time_input.prop('disabled', true);
              date_input.prop('disabled', true);

              insert_moment(element, date_input.val(), time_input.val());
              $(window).scrollTo(element, 300);

              time_input.prop('disabled', false);
              date_input.prop('disabled', false);
              datetime_button.addClass('disabled').removeClass('btn-success');
            }
          });

          // Moment delete
          var delete_button = element.find('#trigger_moment_delete');

          delete_button.click(function() {
            if(confirm("Do you really want to delete this moment?")) {
              element.find('.popover').fadeOut(300, function() {
                element.find('img').popover('hide');
              })
              remove_moment(element);
            }
          });

          // Save moment
          save_button.click(function() {
            if(!save_button.hasClass('disabled')) {
              description_input.prop("disabled", true);
              save_button.addClass('disabled');
              datetime_button.addClass('disabled');
              time_input.prop('disabled', true);
              date_input.prop('disabled', true);

              var src = element.find('img').attr('src');
              var base64 = src.substring(src.indexOf('base64')+7);

              var save_request = API.request('POST', '/days/{$#day->id}/add_moment', {
                description: description_input.val(),
                image_content: base64,
                time: date_input.val() + 'T' + time_input.val() + ':' + time_input.attr('seconds') + time_input.attr('timezone')
              });

              var moment_image = element.find('.moment-image-holder img');

              moment_image.after($('#template_upload_progress').html());
              var upload_progress_bar = element.find('.moment-upload-progress');
              var upload_progress_bar_indicator = upload_progress_bar.find('.progress .bar');

              upload_progress_bar.css('top', ((moment_image.height()-10)/2) + 'px');

              moment_image.animate({
                opacity: 0.25
              }, 500);

              save_request.params.progress = function(event) {
                if(event.lengthComputable) {
                  upload_progress_bar_indicator.css('width', ((event.loaded / event.total) * 100) + '%');
                }
              };

              save_request.success(function(response) {
                element.find('.popover').fadeOut(300, function() {
                  element.find('img').popover('hide');
                });
                description_input.prop("disabled", false);
                save_button.addClass('disabled').removeClass('btn-success');
                save_button.text('Save description');
                element.removeClass('moment-item-new error success');
                time_input.prop('disabled', false);
                date_input.prop('disabled', false);
                datetime_button.addClass('disabled').removeClass('btn-success');
                upload_progress_bar.fadeOut(500, function() {
                  upload_progress_bar.detach();
                })

                moment_image.animate({
                  opacity: 1
                }, 500);

                // Set moment_id
                element.attr('moment_id', response.data.result.id);

                // Re-bind normal events
                element.find('*').off();
                attach_moment_events(element);
              });

              save_request.error(function() {
                save_button.addClass('btn-danger').removeClass('btn-success');
              });

              upload_progress_bar.fadeIn(500, function() {
                save_request.send();
              })
            }
          });

          insert_moment(element);

          if(do_scroll == undefined || do_scroll !== false) {
            $(window).scrollTo(element, 500);
          }

          return element;
        };

        var create_moment_from_file = function(file) {
          var reader = new FileReader();

          var file_date = Tools.getDate(file.lastModifiedDate);
          var file_time = Tools.getTime(file.lastModifiedDate);
          var file_time_seconds = Tools.getSeconds(file.lastModifiedDate);
          var file_timezone_offset = Tools.getTimezone(file.lastModifiedDate);

          $(reader).load(function() {
            var element = create_moment({
              date:file_date,
              time:file_time,
              time_seconds:file_time_seconds,
              timezone:file_timezone_offset,
              image:this.result,
              description:''
            }, false);

            $(window).scrollTo($('.moment-item-new').first(), 500);
          });

          if (!FileReaderFilter.test(file.type)) {
            alert("Currently we support only images!");
            return;
          }

          reader.readAsDataURL(file);
        };

        // Make it accessible globally
        window.create_moment_from_file = create_moment_from_file;
        window.create_moment = create_moment;

        $(moments_selector).each(function() {
          attach_moment_events($(this));
        });

        // Moment description edit
        var final_description = $('.final-description');
        var final_description_input  = final_description.find('textarea');
        var final_description_button = final_description.find('button[type=submit]');

        final_description_input.on('keyup', function(event) {
          final_description_button.removeClass('disabled').addClass('btn-success');
        });

        final_description_button.click(function() {
          if(!final_description_button.hasClass('disabled')) {
            final_description_input.prop("disabled", true);
            final_description_button.addClass('disabled');

            var final_description_request = API.request('POST', '/days/{$#day->id}/update', {
              final_description: final_description_input.val()
            });

            final_description_request.success(function() {
              final_description_input.prop("disabled", false);
              final_description_button.addClass('disabled').removeClass('btn-success');
            });

            final_description_request.error(function() {
              final_description_button.addClass('btn-danger').removeClass('btn-success');
            });

            final_description_request.send();
          }
        });
      <? } ?>

      // Comments updater
      var comments = $('.comments');
      var comments_input  = comments.find('textarea');
      var comments_button = comments.find('button[type=submit]');
      var comments_delete_button_selector = '.btn-comment-delete';
      var comments_delete_button = comments.find(comments_delete_button_selector);
      var comments_counter = comments.find('#comments_counter');

      var comments_loader = $('.comments-loader');
      var comments_loader_button = comments_loader.find('button[type=button]');
      var comments_template = Template.prepareTemplate($('#template_comments'));

      var comment_storage_key = "days/{$#day->id}/comment";

      var comment_saved_input = Storage.get(comment_storage_key);
      if(comments_input.val() == '' && comment_saved_input !== undefined && comment_saved_input != false) {
        comments_input.val(comment_saved_input);
        comments_button.removeClass('disabled').addClass('btn-success');
      }

      var getCommentsCounter = function() {
        var text = comments_counter.text();
        return parseInt(text.substring(text.indexOf('/')+1));
      };

      var setCommentsCounter = function(value) {
        var real_count = $('.comment-item').length;

        if(value < real_count) {
          value = real_count;
        } else if(value > real_count) {
          if(comments_loader_button.css('display') == 'none') {
            comments_loader_button.fadeIn(500);
          }
          value = real_count + '/' + value;
        } else if(value > 3 && comments_loader_button.css('display') == 'none') {
          comments_loader_button.fadeIn(500);
        } else {
          comments_loader_button.fadeOut(500);
        }

        comments_counter.text(value);
      };

      var deleteComment = function() {
        var element = $(this).closest('[comment_id]');
        var id = element.attr('comment_id');

        if(confirm("Do you really want to delete your comment?")) {
          var delete_request = API.request('POST', '/day_comments/' + id + '/delete');
          delete_request.success(function() {
            element.fadeOut(500, function() {
              element.remove();

              setCommentsCounter(getCommentsCounter()-1);
            });
          });

          delete_request.error(function() {
            alert("We can't delete comment right now, please try again later or tell us about this issue");
          }, true);

          delete_request.send();
        }
      };

      var updateComments = function() {
        if(!comments_loader_button.hasClass('disabled')) {
          var comments_request = API.request('GET', '/days/{$#day->id}/comments', {
            from: comments.find('li[comment_id]').last().attr('comment_id')
          });

          comments_loader_button.addClass('disabled');

          comments_request.success(function(response) {
            comments_loader_button.removeClass('disabled btn-danger');

            var tmp = $($.trim(Template.compileElement(comments_template, {comments:response.data.result})));

            tmp.find(comments_delete_button_selector).click(deleteComment);

            comments_loader.before(tmp);

            $('.comment-item').fadeIn();

            setCommentsCounter(getCommentsCounter());
          });

          comments_request.error(function() {
            comments_loader_button.addClass('btn-danger');
          });

          comments_request.send();
        }
      };

      comments_loader_button.click(updateComments);

      // Comments
      comments_input.on('keyup', function(event) {
        comments_button.removeClass('disabled').addClass('btn-success');
        if($.trim(comments_input.val()) != '') {
          Storage.set(comment_storage_key, comments_input.val());
        } else {
          Storage.remove(comment_storage_key);
        }
      });

      comments_button.click(function() {
        if(!comments_button.hasClass('disabled')) {
          comments_input.prop("disabled", true);
          comments_button.addClass('disabled');

          var comments_request = API.request('POST', '/days/{$#day->id}/comment', {
            text: comments_input.val()
          });

          comments_request.success(function() {
            comments_input.val('');
            comments_input.prop("disabled", false);
            updateComments();
            comments_button.addClass('disabled').removeClass('btn-success');
            Storage.remove(comment_storage_key);
          });

          comments_request.error(function() {
            comments_button.addClass('btn-danger').removeClass('btn-success');
          });

          comments_request.send();
        }
      });

      comments_delete_button.click(deleteComment);

      // Like toggle
      <?php if(property_exists($this->day, 'is_liked')) { ?>
        var like_current_state = {$this->day->is_liked|default:'false'};
        var likes_count = {$this->day->likes_count};

        var like_button = $('button#toggle_like');
        like_button.click(function() {
          if(!like_button.hasClass('disabled')) {
            like_button.addClass('disabled');

            if(like_current_state == true) {
              var like_request = API.request('POST', '/days/{$#day->id}/unlike');
              like_request.success(function() {
                like_current_state = false;
                likes_count--;

                like_button.text('Like');
                $('#toggle_like_icon').html('<i class="icon icon-heart-empty"></i> ' + likes_count);
                like_button.removeClass('disabled');
              });
              like_request.send();
            } else {
              var like_request = API.request('POST', '/days/{$#day->id}/like');
              like_request.success(function() {
                like_current_state = true;
                likes_count++;

                like_button.text('Unlike');
                $('#toggle_like_icon').html('<i class="icon icon-heart"></i> ' + likes_count);
                like_button.removeClass('disabled');
              });
              like_request.send();
            }
          }
        });
      <? } ?>
    <? } ?>

    // Share toggle
    var share_button = $('button#toggle_share');
    share_button.click(function() {
       if(!share_button.hasClass('disabled')) {
        share_button.addClass('disabled')
        var share_request = API.request('POST', '/days/{$#day->id}/share');
        share_request.complete(function() {
          share_button.removeClass('disabled');
        });
        share_request.send();
      }
    });

    // Mobile nav comments
    $('.mobile-nav #comments').click(function() {
      $(document).scrollTo($('.comments'), 400);
    });
  {{/into}}
  </script>
  {{into slot="content"}}
      <div class="row-fluid">
          <div class="span6 offset3">
              <? if($this->is_owner) { ?>
                <span class="day-controls pull-right">
                  <a class="not-decorated with-shadow" id="trigger_day_delete" day_id="{$#day->id}"><i class="icon-trash"></i></a>
                </span>

                <div style="margin-bottom:20px;">
                  <div id="day_title_selector">
                    <h5>Day title:</h5>
                    <span class="input-append">
                      <input type="text" class="add-on-small input-xlarge" value="{$#day->title}" />
                      <button class="btn disabled btn-small" type="submit">Save</button>
                    </span>
                    <br />
                    <small class="alert-small" style="display:none">
                      * <span class="contents"></span>
                    </small>
                  </div>

                  <div id="day_type_selector">
                    <h5>Day type:</h5>
                    <div class="btn-group">
                      <button class="btn btn-small<? if($this->day->type == 'Working day') {?> active btn-success<? } ?>">Working day</button>
                      <button class="btn btn-small<? if($this->day->type == 'Day off') {?> active btn-success<? } ?>">Day off</button>
                      <button class="btn btn-small<? if($this->day->type == 'Holiday') {?> active btn-success<? } ?>">Holiday</button>
                      <button class="btn btn-small<? if($this->day->type == 'Trip') {?> active btn-success<? } ?>">Trip</button>
                    </div>
                  </div>

                  <br />
                  <p class="muted day-info">
                    <span class="pull-right">
                      <i class="icon icon-calendar"></i> {$#day->date}
                    </span>
                    by <b><a href="/pages/{$#day->user->id}/user">{$#day->user->name}</a></b>
                  </p>
                </div>
              <? } else { ?>
                <h2 class="day-title">{$#day->title}</h2>

                <p class="muted day-info">
                  <span class="pull-right">
                    <i class="icon icon-calendar"></i> {$#day->date}
                  </span>
                  {$#day->type} by <b><a href="/pages/{$#day->user->id}/user">{$#day->user->name}</a></b>
                  <!-- @ {$#day.location} -->
                </p>
              <? } ?>

              <div class="mobile-nav">
                <h5>Go to:</h5>
                <ul class="unstyled">
                  <li>
                    <div class="input-prepend">
                      <span class="add-on add-on-small"><i class="icon-comments"></i> {$this->day->comments_count}</span>
                      <button id="comments" class="btn btn-small" type="button">Comments</button>
                    </div>
                  </li>
                </ul>
              </div>

              {{list using="$#day->moments"}}
                <ul class="unstyled moments-list">
                  <? if($this->is_owner) { ?>
                    <li class="well moment-item-placeholder">
                      <a class="not-decorated with-shadow"><i class="icon-plus-sign icon-2x"></i></a>
                    </li>
                  <? } ?>
                  {{list:item}}
                    <li class="well moment-item" moment_id="{$item->id}" itemscope itemtype="http://schema.org/ImageObject">
                        <? if($this->is_owner) { ?>
                          <span class="moment-controls-overlay">
                            <a class="not-decorated with-shadow" id="trigger_moment_delete"><i class="icon-trash"></i></a>
                          </span>
                        <? } ?>

                        <div class="timepicker text-center with-shadow">
                          <? if($this->is_owner) { ?>
                            <span class="input-prepend input-append">
                              <span class="add-on add-on-small"><i class="icon-calendar"></i></span>
                              <input type="text" subtype="date" class="add-on-small" value="{$item->date}" />

                              <span class="add-on add-on-small"><i class="icon-time"></i></span>
                              <input type="text" subtype="time" class="add-on-small" value="{$item->time}" seconds="{$item->time_seconds}" timezone="{$item->timezone}" />

                              <button id="trigger_save_time" class="btn btn-small disabled" type="button">Save</button>
                            </span>
                          <? } else { ?>
                            <time datetime="{$item->datetime_iso}"><i class="icon-time"></i> {$item->time}</time>
                          <? } ?>
                        </div>

                        <div class="moment-image-holder">
                          <img src="{$item->image_532}" width="400" class="img-polaroid" itemprop="contentUrl" alt="" />
                        </div>

                        <br class="clearfix" />


                        <? if($this->is_owner || $item->description) { ?>
                          <p class="bubble moment-description" itemprop="description">
                            <? if($this->is_owner) { ?>
                              <textarea rows="3" class="input-block-level" placeholder="Enter moment description...">{$item->description|default:""|nl2br}</textarea>
                              <button type="submit" class="btn btn-block disabled">Save description</button>
                            <? } else { ?>
                              {$item->description|nl2br}
                            <? } ?>
                          </p>
                        <? } ?>
                    </li>

                    <? if($this->is_owner) { ?>
                      <li class="well moment-item-placeholder">
                        <a class="not-decorated with-shadow">
                          <i class="icon-plus-sign icon-2x"></i>
                        </a>
                      </li>
                    <? } ?>
                  {{/list:item}}
                </ul>
              {{/list}}

              <? if($this->is_owner || $this->day->final_description) { ?>
                <p class="bubble final-description">
                  <? if($this->is_owner) { ?>
                    <textarea rows="3" class="input-block-level" placeholder="Enter final description...">{$#day->final_description|default:""|nl2br}</textarea>

                    <? if($this->day->final_description) { ?>
                      <button type="submit" class="btn btn-block disabled">Save changes</button>
                    <? } else { ?>
                      <button type="submit" class="btn btn-block<? if(count($this->day->moments) > 1) { ?> disabled<? } ?>">Close the day</button>
                    <? } ?>
                  <? } else { ?>
                    {$#day->final_description|default:""|nl2br}
                  <? } ?>
                </p>
              <? } else { ?>
                <div class="alert alert-block">
                  <h4>This day is live!</h4>
                  Stay tuned for new moments in this day, it's not finished yet!
                </div>
              <? } ?>

              <div class="day-user-actions">
                <ul class="pull-right unstyled inline">
                  <? if($this->toolkit->getUser()) { ?>
                  <li>
                    <?php
                    $disabled = false;
                    if(!property_exists($this->day, 'is_liked')) {
                      $disabled = true;
                      $text = "Like";
                      $icon = "icon-heart";
                    } elseif($this->day->is_liked) {
                      $text = "Unlike";
                      $icon = "icon-heart";
                    } else {
                      $text = "Like";
                      $icon = "icon-heart-empty";
                    }
                    ?>
                    <div class="input-prepend">
                      <span id="toggle_like_icon" class="add-on add-on-small"><i class="icon <?= $icon ?>"></i> {$this->day->likes_count}</span>
                      <button id="toggle_like" class="btn btn-small<?= $disabled ? ' disabled' : '' ?>" type="button"> <?= $text ?></button>
                    </div>
                  </li>
                  <!-- <li>
                    <?php
                    $disabled = false;
                    if(!property_exists($this->day, 'is_favorite')) {
                      $disabled = true;
                      $text = "Favorite";
                      $icon = "icon-bookmark";
                    } elseif($this->day->is_favorite) {
                      $text = "Unfavorite";
                      $icon = "icon-bookmark";
                    } else {
                      $text = "Favorite";
                      $icon = "icon-bookmark-empty";
                    }
                    ?>
                    <div class="input-prepend">
                      <span class="add-on add-on-small"><i class="icon <?= $icon ?>"></i></span>
                      <button class="btn btn-small<?= $disabled ? ' disabled' : '' ?>" type="button"> <?= $text ?></button>
                    </div>
                  </li> -->
                  <? } ?>
                  <li>
                    <button id="toggle_share" class="btn btn-small" style="margin-top: 14px" type="button"><i class="icon icon-share"></i> Share</button>
                  </li>
                </ul>
              </div>

              <hr/>

              <? if($this->toolkit->getUser() || $this->day->comments_count > 0) { ?>
                <div class="comments">
                  <span class="pull-right not-decorated with-shadow">
                    <i class="icon-comments"></i>
                    <span id="comments_counter"><? if($this->day->comments_count > 3) { ?>3/<? } ?>{$this->day->comments_count}</span>
                  </span>
                  <h2>Comments:</h2>
                    <ul class="unstyled">
                      {{list using="$#day->comments"}}
                        {{list:item}}
                          <li class="comment-item" comment_id="{$item->id}">
                            <img src="{$item->user->image_72}" width="72" class="pull-left img-rounded" alt="" />

                            <div class="bubble left">
                              <p class="text">
                                <? if($this->current_user && $item->user->id == $this->current_user->id) { ?>
                                  <a class="pull-right not-decorated with-shadow btn-comment-delete"><i class="icon-trash"></i></a>
                                <? } ?>

                                {$item->text}

                                <small>by <b><a href="/pages/{$item->user->id}/user">{$item->user->name}</a></b></small>
                              </p>
                            </div>
                          </li>
                        {{/list:item}}
                      {{/list}}
                      <li class="comments-loader">
                        <button class="btn btn-small btn-block"<? if($this->day->comments_count < 4) { ?> style="display:none"<? } ?> type="button">
                          Load more comments
                        </button>
                      </li>
                    </ul>

                  <? if($this->toolkit->getUser()) { ?>
                    <textarea rows="3" class="input-block-level"></textarea>
                    <button type="submit" class="btn btn-block disabled">Send comment</button>
                  <? } ?>
                </div>
              <? } ?>
          </div>
      </div>
  {{/into}}
{{/wrap}}
